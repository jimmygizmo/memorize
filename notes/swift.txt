Misc notes on Swift language in general and related
------------------------------

In Swift, you cannot have variables which have no value.
Variables must always have a value from the time they are created, throughout their entire life.
* There are 'optional' variables which sort of look this way but they actually have the value of "not set yet".
But booleans must always have a value. (This seems true of any language with a boolean type. When would it not be?)

-----------------------

In Swift it is "true", LOWERCASE. (Different from Python where it must have an initial upper: "True".)
Swift: true
Python: True
(Presumably also - Swift: false, Python: False.)

-----------------------------
Decalrations - variable vs. constant:
var - variable
let - constant

---------------------------------
Swift can figure out an array type, or you can be explicit about it:

    var cardIcons = [ "a", "b", "c", "d" ]
    //    var cardIcons: Array<String> = [ "a", "b", "c", "d" ]  // Longer, explicit array type.

--------------------------------------
Showing the long vs short form of ForEach in a viewbuilder. Also shows how you can use id: \.self in cases
where you dont have an actual identifiable to iterate over. This is actually a crude hack.

        HStack {
            // Using id: \.self is a temporary hack be cause String is not an identifiable so it
            // really cannot be used in a ForEach like this. This won't work for the real app.
            // This assigns the string itself as the identifier, id:. TODO: Research \.self
            ForEach(deckIcons, id: \.self) { cardIcon in
                CardView(iconCharacter: cardIcon, isFaceUp: true)
            }
// Longer version (with content: and the parens enclosing the lambda function):
//            ForEach(deckIcons, id: \.self, content: { cardIcon in
//                CardView(iconCharacter: cardIcon, isFaceUp: true)
//            })
        }

--------------------------------------
String interpolation looks like this:
print("The current value of friendlyWelcome is \(friendlyWelcome)")

Can evaluate expressions inline like this:
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5"

Handle the equivalent of a Python "raw" string like this (when you don't want the interpolation to happen):
print(#"Write an interpolated string in Swift using \(multiplier)."#)
// Prints "Write an interpolated string in Swift using \(multiplier)."

You can mix raw and interpolated:
rint(#"6 times 7 is \#(6 * 7)."#)
// Prints "6 times 7 is 42."

-------------------------------------

Swift has a REPL like Python (but different). You exit it with Ctrl-D like Py.

➜  notes git:(main) ✗ swift
Welcome to Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57).
Type :help for assistance.
  1> UInt8.max
$R0: UInt8 = 255
  2> ^D
➜  notes git:(main) ✗

Article on the Swift REPL:
https://www.aidanf.net/learn-swift/running_code

-------------------------------------

Double is more accurate than float. Swift infers/defaults-to Double when a floating-point type is inferred.

➜  notes git:(main) ✗ swift
Welcome to Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57).
Type :help for assistance.
  1> Double.pi
$R0: Double = 3.1415926535897931
  2> Float.pi
$R1: Float = 3.1415925

-----------------------------------

Triple quotes for multi-line and also to contain literal quote chars. Like:

let quotation = """
I said "I have \(apples) apples."
And then I said "I have \(apples + oranges) pieces of fruit."
"""

NOTE!! Indentation removed if you match the indentation with the last """, like:

    let quotation = """
        I said "I have \(apples) apples."
        And then I said "I have \(apples + oranges) pieces of fruit."
        """

* Result should be the same but the above example as typed is theoretical. I did not test it yet.

-----------------------------------------------

Many of the basic constructs and behavior of the languages is extremely similar between Python and Swift.
This article shows how remarkably similar the two are, at least for the fundamentals.

https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html

-------------------------------------

One of the most important differences between structures and classes is that structures are always copied when they’re passed around in your code, but classes are passed by reference.

------------------------------------------

Swift DEFAULTS TO Double for floating-point numbers like 3.14159 etc.
Swift support Float and Double types but Double is preferred if all else is the same.

Assignment/initilization/declaration example of type inference:
let pointOneFourOneFiveNine = 0.14159

This gives you a Double.
(not a Float)

--------------------------------------------

Swift floating-point to integer conversion:
Floating-point values are always truncated when used to initialize a new integer value in this way. This means that 4.75 becomes 4, and -3.9 becomes -3.

---------------------------------


Clarifying usage of UNDERSCORE: _
A GREAT Stack Overflow thread:

https://stackoverflow.com/questions/39627106/why-do-i-need-underscores-in-swift

Clarifies how it affects labels for function arguments, and disabling the requirement for argument labels when calling.
(Required since Swift 3)

-------------------------------------

This is unique to Swift: The nil-coalescing operator (a ?? b) unwraps an optional a if it contains a value, or returns a default value b if a is nil. The expression a is always of an optional type. The expression b must match the type that’s stored inside a.

The nil-coalescing operator is shorthand for the code below:

a != nil ? a! : b

------------------------------

Also unique to Swift; use the += operator to append an array onto another:
shoppingList += ["Baking Powder"]
// shoppingList now contains 4 items
shoppingList += ["Chocolate Spread", "Cheese", "Butter"]
// shoppingList now contains 7 items

----------------------------------

"POP" last item off of an array:

let apples = shoppingList.removeLast()

--------------------------------------

Was doing a simple example that had a @State var but I was getting an error when I changed the Text()
using it to a TextField(). Anyhow, in trying to solve that error, I tried simply changing the @State to
@Published and then Swift dropped a little wisdom on me, which I had not yet pinned in my mind:

'wrappedValue' is unavailable: @Published is only available on properties of classes

OK. So I'm sure I will see more on this topic soon, or will chase that down as I will be using
ObservableObject a lot, no doubt.

This comes from work and wanderings via this tut:
https://www.youtube.com/watch?v=stSB04C4iS4

--------------------------------

A particularly important nugget of info from near the beginning of Closures in the Language Guide:
Closure Expression Syntax
Closure expression syntax has the following general form:

{ (parameters) -> return type in
    statements
}
The parameters in closure expression syntax can be in-out parameters, but they can’t have a default value. Variadic parameters can be used if you name the variadic parameter. Tuples can also be used as parameter types and return types.

-----------------------------------




