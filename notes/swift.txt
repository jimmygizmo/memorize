Misc notes on Swift language in general and related
------------------------------

In Swift, you cannot have variables which have no value.
Variables must always have a value from the time they are created, throughout their entire life.
* There are 'optional' variables which sort of look this way but they actually have the value of "not set yet".
But booleans must always have a value. (This seems true of any language with a boolean type. When would it not be?)

-----------------------

In Swift it is "true", LOWERCASE. (Different from Python where it must have an initial upper: "True".)
Swift: true
Python: True
(Presumably also - Swift: false, Python: False.)

-----------------------------
Decalrations - variable vs. constant:
var - variable
let - constant

---------------------------------
Swift can figure out an array type, or you can be explicit about it:

    var cardIcons = [ "a", "b", "c", "d" ]
    //    var cardIcons: Array<String> = [ "a", "b", "c", "d" ]  // Longer, explicit array type.

--------------------------------------
Showing the long vs short form of ForEach in a viewbuilder. Also shows how you can use id: \.self in cases
where you dont have an actual identifiable to iterate over. This is actually a crude hack.

        HStack {
            // Using id: \.self is a temporary hack be cause String is not an identifiable so it
            // really cannot be used in a ForEach like this. This won't work for the real app.
            // This assigns the string itself as the identifier, id:. TODO: Research \.self
            ForEach(deckIcons, id: \.self) { cardIcon in
                CardView(iconCharacter: cardIcon, isFaceUp: true)
            }
// Longer version (with content: and the parens enclosing the lambda function):
//            ForEach(deckIcons, id: \.self, content: { cardIcon in
//                CardView(iconCharacter: cardIcon, isFaceUp: true)
//            })
        }

--------------------------------------
String interpolation looks like this:
print("The current value of friendlyWelcome is \(friendlyWelcome)")

Can evaluate expressions inline like this:
let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
// message is "3 times 2.5 is 7.5"

Handle the equivalent of a Python "raw" string like this (when you don't want the interpolation to happen):
print(#"Write an interpolated string in Swift using \(multiplier)."#)
// Prints "Write an interpolated string in Swift using \(multiplier)."

You can mix raw and interpolated:
rint(#"6 times 7 is \#(6 * 7)."#)
// Prints "6 times 7 is 42."

-------------------------------------

Swift has a REPL like Python (but different). You exit it with Ctrl-D like Py.

➜  notes git:(main) ✗ swift
Welcome to Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57).
Type :help for assistance.
  1> UInt8.max
$R0: UInt8 = 255
  2> ^D
➜  notes git:(main) ✗

Article on the Swift REPL:
https://www.aidanf.net/learn-swift/running_code

-------------------------------------

Double is more accurate than float. Swift infers/defaults-to Double when a floating-point type is inferred.

➜  notes git:(main) ✗ swift
Welcome to Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57).
Type :help for assistance.
  1> Double.pi
$R0: Double = 3.1415926535897931
  2> Float.pi
$R1: Float = 3.1415925

-----------------------------------







