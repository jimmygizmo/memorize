Create a launch screen:
https://www.appcoda.com/launch-screen-swiftui/

** DEPRECATED? To see message, highlight Assets.xcassets. Default/empty should show unselected options of AccentColor and AppIcon, but you can add more via the plus icon at the bottom of this pane.
PLUS ICON -> iOS -> "iOS Launch Image (Deprecated)"
Looks like maybe the preferred alternative in the latest XCode 12.5.1 is to use:
PLUS ICON -> iOS -> "iOS App Icon"
TODO: Confirm the new way to do a launch/splash image.
** So, the above link might be outdated at this point.

-----------------------------
drop shadow on a view

https://www.hackingwithswift.com/quick-start/swiftui/how-to-draw-a-shadow-around-a-view

----------------------------------
regarding "some View" and Swift's Opaque Return Types:

https://www.hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type
Accompanying video:
https://www.youtube.com/watch?v=SzgxLMUumic

-----------------------------------

Article on the Swift REPL:
https://www.aidanf.net/learn-swift/running_code

-----------------------------------------
Thread discussing Optionals, if let, guard let

https://stackoverflow.com/questions/29662836/swift-use-of-optional-with-let

---------------------------------------
Don't confuse ?? with a Python-style short-circuit operator! ?? Is the NIL-COALESCING (Optional-unwrapping) operator!

https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72

---------------------------------------
Comparison of Python to Swift

https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html

-----------------------------------

Clarifying usage of UNDERSCORE: _
A GREAT Stack Overflow thread:

https://stackoverflow.com/questions/39627106/why-do-i-need-underscores-in-swift

Clarifies how it affects labels for function arguments, and disabling the requirement for argument labels when calling.
(Required since Swift 3)

-------------------------------

Tuples - general info. Mentions they are value types not reference types. This is my big question.

https://www.journaldev.com/19515/swift-tuple

-----------------------

Asserts in Swift and Why you Should Be Using Them:
https://medium.com/@alecoconnor/asserts-in-swift-and-why-you-should-be-using-them-6a7c96eaec10

-------------------

It is good to follow multiple related tutorials on a topic to fill in gaps, learn related extras, solidify
memory of information and discover new sources of information. I plan to have a look at this introductory
SwiftUI tut on ScrollView, Shapes, TabBar and SwiftUI basics:
https://www.youtube.com/watch?v=xfOehTZXnYk

----------------

Get really fancy using code to manipulate SF Symbols as masks and do photoshop-stle tricks from CODE!
https://stackoverflow.com/questions/60192357/inverted-mask-swiftui-with-system-image

----------------------

Don't forget how important it is to pick a good set of colors to use in your UI Design.
As with everything, there are a lot of poor sources of info on this topic, but I think this link is
a very good place to start. Quick overview of a handful of formal/traditional design strategies for
picking a color scheme. Quick read, but very interesting. Lots of clear examples.

https://designerup.co/blog/ui-design-choosing-color-palettes/

UPDATE: I read more of this. It is really quite good. Goes into detail on exactly how to apply your color scheme
idea into the parts of the UI design, in particular how you can do it all with different shades of a single
theme color, which is a good way to start and keep the design clean from the get go.

-------------------------

Good info on how to manage different kinds of app constants in structs in multiple constants files:
Look at post by: Anish Parajuli

https://stackoverflow.com/questions/26252233/global-constants-file-in-swift

-----------------------

Candidate for tutorial C:
SwiftUI Tutorial: Build an iBeacon detector with object binding and custom modifiers
https://www.youtube.com/watch?v=lCNpEaZiKqU

-----------------------------

Logging in Swift
https://stevenpcurtis.medium.com/logging-in-swift-d9b59146ff00

---------------------

For testing iBeacons, how to simulate an iBeacon from a Mac, using a command line tool:
https://www.beaconzone.co.uk/blog/make-your-mac-advertise-ibeacon/

----------------------

Looks like a good general CoreBluetooth tutorial. IOS but only does print output and no UI.
This is fine for now.
https://www.novelbits.io/intro-ble-mobile-development-ios/
Part 2:
https://www.novelbits.io/intro-ble-mobile-development-ios-part-2/
Part 2 has a UI and looks like a fairly complete scanner.

This will be tutorial C, to get some coding in, while completing the large reading assignment for Stanford CS193P.

-------------------------

I have an HM-10 BLE module to use with Arduino etc. I want to use it as an iBeacon for testing etc.
This shows how (although it references PC only tools, has lots of good info.)
https://www.instructables.com/make-iBeacon/

---------------------------

Nordic nRF51 DK BLE Development kit, Arduino compatible  used by am authoratative BLE course/author:
https://www.nordicsemi.com/Products/Development-hardware/nRF52-DK

Referenced in this BLE Tutorial part 1:
https://www.novelbits.io/intro-ble-mobile-development-ios/

And part 2:
https://www.novelbits.io/intro-ble-mobile-development-ios-part-2/

-----------------------

Looks like a great article on the HM-10 BLE module and how to connect it to a Mac.
http://www.hangar42.nl/hm10

GREAT SET OF LINKS TO HM-10 RESOURCES AND VARIOUS EXAMPLE CODE PROJECTS AT END OF PAGE

----------------------------

For gradient backgrounds and other gradient usage. Pretty cool!

Gradients
https://www.hackingwithswift.com/quick-start/swiftui/how-to-render-a-gradient

Fancy Gradients
https://sarunw.com/posts/gradient-in-swiftui/

-----------------------------------------

Apple Notification Center Service (ANCS) Specification
https://developer.apple.com/library/archive/documentation/CoreBluetooth/Reference/AppleNotificationCenterServiceSpecification/Introduction/Introduction.html

-----------------------------

Could be a great tutorial to do and makes a useful app.
Makes a table view of all IOS system sounds which you can play to sample. UIKit needs to be adapted to SwiftUI.
Systematic table creation with dynamic links back to a function like play audio is useful.
https://www.youtube.com/watch?v=6ZlbAb_Gyzo

----------------------------

Short tut on ObservableObject, @Publish etc
https://www.youtube.com/watch?v=VioWHKN1eKs

The above tut mentions that "Combine is Apple's new reactive framework for IOS 13" ..
I found the following Reddit post that sheds light in what reactive framwork means (it means pub/sub perhaps among other things) .. and Combine etc.
https://www.reddit.com/r/iOSProgramming/comments/bwg1i7/combine_apples_new_reactive_framework/

and ... Pub/Sub Vs Observer Vs Reactive CLARIFIED a little bit:
https://stackoverflow.com/questions/30784360/pub-sub-vs-observer-vs-reactive

Short tut on STATE: @State, @ObjectBinding, @EnvironmentObject ..
https://www.youtube.com/watch?v=stSB04C4iS4

---------------------------

Discusses fact that SwiftUI will not let you bind optionals to Text fields, but this is part of a larger topic.
https://www.hackingwithswift.com/books/ios-swiftui/extending-existing-types-to-support-observableobject

--------------------------------

Good little article (and other interesting postings on this blog). Topic:
Implementing a simple Queue.
https://medium.com/@JoyceMatos/data-structures-in-swift-queues-and-stacks-e7d715634f07
* Was thinking that when beacons are detected, they should be pushed onto a queue and then
dequeued FIFO after that. Along with this, block on the playing of the little beep in the loop that
dequeues, so that we hear each individual beep for a discovery event individually and not a bunch of
them on top of each other like we do now. Would be a nicer user experience I think. For sure mushing audio alerts together is a horrible thing. Is there somewhere we could block and sort of cause an internal queuue to happen for the didDiscover events? This would have limits I am sure and might be disallowed/or an anti-patterns etc lol.

---------------------------

Getting RSSI to View meant converting an optional NSNumber to a String. NumberFormatter will make the string.
You might use the nil-coalescing operator too. Remember you can't send optionals to SwiftUI Views.
NumberFormatter article:
https://www.swiftbysundell.com/articles/formatting-numbers-in-swift/
Another little related article:
https://www.hackingwithswift.com/example-code/language/what-is-nsnumber

------------------------------

What is delegation in Swift?
https://learnappmaking.com/delegation-swift-how-to/

------------------------------------

Create a conditional view modifier extension
https://www.avanderlee.com/swiftui/conditional-view-modifier/

-------------------------------

I think when a UI/app gets even moderately complex then a central messaging system will be needed.
Something with pub/sub and more that independent objects and even threads can be coordinated with.
Not sure if this is THE solution, but it is somewhere to start: NotificationCenter
https://developer.apple.com/documentation/foundation/notificationcenter

-------------------------------

3-PART TUT ON SWIFTUI LAYOUT SYSTEM.
Looks good and should fill some gaps I have been curious about:
https://www.swiftbysundell.com/articles/swiftui-layout-system-guide-part-1/
https://www.swiftbysundell.com/articles/swiftui-layout-system-guide-part-2/
https://www.swiftbysundell.com/articles/swiftui-layout-system-guide-part-3/

-----------------------------------------

Looks like a very good tutorial on Frames, Layouts:
https://swiftui-lab.com/frame-behaviors/

------------------------------

This article on Structs/Immutability/Extensions and more was written about an older Swift version (3.9) but covers fairly generic concepts so is probably all/most still relevant.
I think it is good to read and then read something else on the same topics for Swift 5.5.
Important topics here and a good alternative perspective like this helps things sink in.
https://chris.eidhof.nl/post/structs-and-mutation-in-swift/

--------------------------------




